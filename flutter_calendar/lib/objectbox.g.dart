// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/get_events/data/objectbox/models/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3444279045135854271),
      name: 'Event',
      lastPropertyId: const IdUid(5, 8180995154595924110),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1138275365069752532),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7767134145342430362),
            name: 'eventName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 764704637277741350),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3023858497766004201),
            name: 'endTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8180995154595924110),
            name: 'scheduleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 7862374044274807120),
            relationTarget: 'Schedule')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8116205206453749373),
      name: 'Schedule',
      lastPropertyId: const IdUid(3, 1846407899909715114),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7195503826473016426),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6117062866313578171),
            name: 'scheduleName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1846407899909715114),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 522414821457522289),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'events', srcEntity: 'Event', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 8703410929131812054),
      name: 'User',
      lastPropertyId: const IdUid(5, 5383349535016798877),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7094871743222610124),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5279589115123962339),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1171242639859731954),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2063345168859440761),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5383349535016798877),
            name: 'scheduleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 1114094041866011809),
            relationTarget: 'Schedule')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8703410929131812054),
      lastIndexId: const IdUid(3, 1114094041866011809),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Event: EntityDefinition<Event>(
        model: _entities[0],
        toOneRelations: (Event object) => [object.schedule],
        toManyRelations: (Event object) => {},
        getId: (Event object) => object.id,
        setId: (Event object, int id) {
          object.id = id;
        },
        objectToFB: (Event object, fb.Builder fbb) {
          final eventNameOffset = object.eventName == null
              ? null
              : fbb.writeString(object.eventName!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, eventNameOffset);
          fbb.addInt64(2, object.startTime?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endTime?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.schedule.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final eventNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final startTimeParam = startTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(startTimeValue);
          final endTimeParam = endTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          final object = Event(
              eventName: eventNameParam,
              startTime: startTimeParam,
              endTime: endTimeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.schedule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.schedule.attach(store);
          return object;
        }),
    Schedule: EntityDefinition<Schedule>(
        model: _entities[1],
        toOneRelations: (Schedule object) => [object.user],
        toManyRelations: (Schedule object) => {
              RelInfo<Event>.toOneBacklink(
                      5, object.id, (Event srcObject) => srcObject.schedule):
                  object.events
            },
        getId: (Schedule object) => object.id,
        setId: (Schedule object, int id) {
          object.id = id;
        },
        objectToFB: (Schedule object, fb.Builder fbb) {
          final scheduleNameOffset = object.scheduleName == null
              ? null
              : fbb.writeString(object.scheduleName!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, scheduleNameOffset);
          fbb.addInt64(2, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final scheduleNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
          final object = Schedule(scheduleName: scheduleNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.user.attach(store);
          InternalToManyAccess.setRelInfo<Schedule>(
              object.events,
              store,
              RelInfo<Event>.toOneBacklink(
                  5, object.id, (Event srcObject) => srcObject.schedule));
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [object.schedule],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addInt64(3, object.date?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.schedule.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = User(
              firstName: firstNameParam, lastName: lastNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..date = dateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateValue);
          object.schedule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.schedule.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Event] entity fields to define ObjectBox queries.
class Event_ {
  /// see [Event.id]
  static final id = QueryIntegerProperty<Event>(_entities[0].properties[0]);

  /// see [Event.eventName]
  static final eventName =
      QueryStringProperty<Event>(_entities[0].properties[1]);

  /// see [Event.startTime]
  static final startTime =
      QueryIntegerProperty<Event>(_entities[0].properties[2]);

  /// see [Event.endTime]
  static final endTime =
      QueryIntegerProperty<Event>(_entities[0].properties[3]);

  /// see [Event.schedule]
  static final schedule =
      QueryRelationToOne<Event, Schedule>(_entities[0].properties[4]);
}

/// [Schedule] entity fields to define ObjectBox queries.
class Schedule_ {
  /// see [Schedule.id]
  static final id = QueryIntegerProperty<Schedule>(_entities[1].properties[0]);

  /// see [Schedule.scheduleName]
  static final scheduleName =
      QueryStringProperty<Schedule>(_entities[1].properties[1]);

  /// see [Schedule.user]
  static final user =
      QueryRelationToOne<Schedule, User>(_entities[1].properties[2]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[2].properties[1]);

  /// see [User.lastName]
  static final lastName = QueryStringProperty<User>(_entities[2].properties[2]);

  /// see [User.date]
  static final date = QueryIntegerProperty<User>(_entities[2].properties[3]);

  /// see [User.schedule]
  static final schedule =
      QueryRelationToOne<User, Schedule>(_entities[2].properties[4]);
}
