// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_calendar/test/features/get_events/data/datasources/schedule_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:objectbox/src/native/box.dart' as _i4;
import 'package:objectbox/src/native/query/query.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryBuilder_1<T1> extends _i1.SmartFake
    implements _i3.QueryBuilder<T1> {
  _FakeQueryBuilder_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<T> extends _i1.Mock implements _i4.Box<T> {
  @override
  int put(
    T? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i2.Future<int> putAsync(
    T? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<T> putAndGetAsync(
    T? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #putAndGetAsync,
                  [object],
                  {#mode: mode},
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #putAndGetAsync,
                [object],
                {#mode: mode},
              ),
            ),
        returnValueForMissingStub: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #putAndGetAsync,
                  [object],
                  {#mode: mode},
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #putAndGetAsync,
                [object],
                {#mode: mode},
              ),
            ),
      ) as _i2.Future<T>);
  @override
  _i2.Future<int> putQueuedAwaitResult(
    T? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueuedAwaitResult,
          [object],
          {#mode: mode},
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  int putQueued(
    T? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueued,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  List<int> putMany(
    List<T>? objects, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [objects],
          {#mode: mode},
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  _i2.Future<List<int>> putManyAsync(
    List<T>? objects, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);
  @override
  _i2.Future<List<T>> putAndGetManyAsync(
    List<T>? objects, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i2.Future<List<T>>.value(<T>[]),
        returnValueForMissingStub: _i2.Future<List<T>>.value(<T>[]),
      ) as _i2.Future<List<T>>);
  @override
  T? get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as T?);
  @override
  _i2.Future<T?> getAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAsync,
          [id],
        ),
        returnValue: _i2.Future<T?>.value(),
        returnValueForMissingStub: _i2.Future<T?>.value(),
      ) as _i2.Future<T?>);
  @override
  List<T?> getMany(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMany,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: <T?>[],
        returnValueForMissingStub: <T?>[],
      ) as List<T?>);
  @override
  _i2.Future<List<T?>> getManyAsync(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManyAsync,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: _i2.Future<List<T?>>.value(<T?>[]),
        returnValueForMissingStub: _i2.Future<List<T?>>.value(<T?>[]),
      ) as _i2.Future<List<T?>>);
  @override
  List<T> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <T>[],
        returnValueForMissingStub: <T>[],
      ) as List<T>);
  @override
  _i2.Future<List<T>> getAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #getAllAsync,
          [],
        ),
        returnValue: _i2.Future<List<T>>.value(<T>[]),
        returnValueForMissingStub: _i2.Future<List<T>>.value(<T>[]),
      ) as _i2.Future<List<T>>);
  @override
  _i3.QueryBuilder<T> query([_i3.Condition<T>? qc]) => (super.noSuchMethod(
        Invocation.method(
          #query,
          [qc],
        ),
        returnValue: _FakeQueryBuilder_1<T>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
        returnValueForMissingStub: _FakeQueryBuilder_1<T>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
      ) as _i3.QueryBuilder<T>);
  @override
  int count({int? limit = 0}) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
          {#limit: limit},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool isEmpty() => (super.noSuchMethod(
        Invocation.method(
          #isEmpty,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool contains(int? id) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool containsMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #containsMany,
          [ids],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Future<bool> removeAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removeAsync,
          [id],
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  int removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i2.Future<int> removeManyAsync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeManyAsync,
          [ids],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  int removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i2.Future<int> removeAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #removeAllAsync,
          [],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
}
